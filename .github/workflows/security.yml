name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --production
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          audit_output=$(pnpm audit --production --json || true)
          critical_count=$(echo "$audit_output" | jq '.metadata.vulnerabilities.critical // 0')
          high_count=$(echo "$audit_output" | jq '.metadata.vulnerabilities.high // 0')

          if [ "$critical_count" -gt 0 ]; then
            echo "❌ Found $critical_count critical vulnerabilities"
            exit 1
          fi

          if [ "$high_count" -gt 0 ]; then
            echo "⚠️ Found $high_count high severity vulnerabilities"
            # Don't fail on high severity in PRs, only warn
            if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
              exit 1
            fi
          fi

          echo "✅ No critical vulnerabilities found"

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
        # Add 'actions' when it becomes generally available

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.84.2
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/react
          generateSarif: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          # Install license checker
          pnpm add -g license-checker-rseidelsohn

          # Run license check and output to JSON
          license-checker --production --json --out licenses.json

          # Check for problematic licenses
          PROBLEMATIC_LICENSES='GPL|AGPL|LGPL|SSPL|BUSL'

          if grep -E "$PROBLEMATIC_LICENSES" licenses.json; then
            echo "❌ Found packages with potentially incompatible licenses"
            exit 1
          fi

          echo "✅ All licenses appear compatible"

  security-report:
    name: Security Report
    needs: [dependency-audit, codeql-analysis, secret-scanning, sast-scan, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check security status
        run: |
          echo "## Security Scan Summary"
          echo
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Dependency Audit | ${{ needs.dependency-audit.result }} |"
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |"
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |"
          echo "| SAST Scan | ${{ needs.sast-scan.result }} |"
          echo "| License Check | ${{ needs.license-check.result }} |"

          # Fail if any critical check failed
          if [ "${{ needs.dependency-audit.result }}" = "failure" ] || \
             [ "${{ needs.codeql-analysis.result }}" = "failure" ] || \
             [ "${{ needs.secret-scanning.result }}" = "failure" ]; then
            echo
            echo "❌ Critical security checks failed"
            exit 1
          fi

          echo
          echo "✅ Security checks completed"
