/**
 * Style Dictionary v5 configuration for the Terroir Core Design System.
 * 
 * Configures design token transformation and output for multiple platforms:
 * - CSS custom properties with theme support
 * - JavaScript/TypeScript modules
 * - JSON for documentation and tooling
 * 
 * Features:
 * - Material Color Utilities integration for dynamic palettes
 * - Custom size/px transform for consistent units
 * - Themed CSS output (light/dark) with data attributes
 * - Output references for maintainable token relationships
 * - Multiple format outputs for different use cases
 * - Theme-specific token filtering
 * - Continuous tone scale support (0-100)
 */

import StyleDictionary from 'style-dictionary';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

// Custom transforms
StyleDictionary.registerTransform({
  name: 'size/px',
  type: 'value',
  transitive: true,
  filter: (token) => token.$type === 'dimension' && token.$value !== 0,
  transform: (token) => `${token.$value}px`
});

// Custom transform for color with opacity
StyleDictionary.registerTransform({
  name: 'color/rgb',
  type: 'value',
  transitive: true,
  filter: (token) => token.$type === 'color',
  transform: (token) => {
    // Handle colors that might have opacity
    if (typeof token.$value === 'object' && token.$value.alpha !== undefined) {
      return `rgba(${token.$value.red}, ${token.$value.green}, ${token.$value.blue}, ${token.$value.alpha})`;
    }
    return token.$value;
  }
});

// Custom format for themed CSS variables
StyleDictionary.registerFormat({
  name: 'css/variables-themed',
  format: async ({ dictionary, options, file }) => {
    const theme = options.theme || 'light';
    const selector = options.selector || `:root[data-theme="${theme}"]`;
    
    const tokens = dictionary.allTokens.map(token => {
      return `  --${token.name}: ${token.value};`;
    }).join('\n');
    
    return `/* Generated by Style Dictionary v5 */\n${selector} {\n${tokens}\n}\n`;
  }
});

// Custom format for TypeScript constants
StyleDictionary.registerFormat({
  name: 'typescript/es6-constants',
  format: async ({ dictionary }) => {
    const exports = dictionary.allTokens.map(token => {
      const name = token.name.replace(/-/g, '_').toUpperCase();
      return `export const ${name} = '${token.value}' as const;`;
    }).join('\n');
    
    return `/* Generated by Style Dictionary v5 */\n${exports}\n`;
  }
});

// Transform groups - extend existing ones
StyleDictionary.registerTransformGroup({
  name: 'custom/css',
  transforms: [
    'attribute/cti',
    'name/kebab',
    'size/px',
    'color/rgb',
    'color/css'
  ]
});

StyleDictionary.registerTransformGroup({
  name: 'custom/js',
  transforms: [
    'attribute/cti',
    'name/pascal',
    'size/px',
    'color/hex'
  ]
});

// Main configuration
const config = {
  source: ['tokens/**/*.{json,jsonc}'],
  preprocessors: ['tokens'], // Use built-in tokens preprocessor for $value/$type
  platforms: {
    css: {
      transformGroup: 'custom/css',
      buildPath: 'dist/tokens/css/',
      files: [
        {
          destination: 'variables.css',
          format: 'css/variables',
          options: {
            outputReferences: true,
            selector: ':root'
          }
        },
        {
          destination: 'variables-light.css',
          format: 'css/variables-themed',
          filter: (token) => !token.filePath.includes('dark'),
          options: {
            theme: 'light',
            outputReferences: true
          }
        },
        {
          destination: 'variables-dark.css',
          format: 'css/variables-themed',
          filter: (token) => !token.filePath.includes('light'),
          options: {
            theme: 'dark',
            outputReferences: true
          }
        }
      ]
    },
    js: {
      transformGroup: 'custom/js',
      buildPath: 'dist/tokens/js/',
      files: [
        {
          destination: 'tokens.js',
          format: 'javascript/es6'
        },
        {
          destination: 'tokens.d.ts',
          format: 'typescript/es6-declarations'
        },
        {
          destination: 'constants.ts',
          format: 'typescript/es6-constants'
        }
      ]
    },
    json: {
      transformGroup: 'js',
      buildPath: 'dist/tokens/json/',
      files: [
        {
          destination: 'tokens.json',
          format: 'json/nested'
        },
        {
          destination: 'tokens-flat.json',
          format: 'json/flat'
        }
      ]
    },
    scss: {
      transformGroup: 'custom/css',
      buildPath: 'dist/tokens/scss/',
      files: [
        {
          destination: '_variables.scss',
          format: 'scss/variables',
          options: {
            outputReferences: true
          }
        }
      ]
    }
  },
  log: {
    verbosity: 'verbose', // 'silent' | 'default' | 'verbose'
    warnings: 'warn', // 'error' | 'warn' | 'disabled'
    errors: {
      brokenReferences: 'throw' // 'throw' | 'console'
    }
  }
};

export default config;